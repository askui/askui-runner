import { UiControlClient } from 'askui';
import { AskUIAllureStepReporter } from '@askui/askui-reporters';
import {Blob} from 'node:buffer';

let aui: UiControlClient;

jest.setTimeout(60 * 1000 * 60);

// https://docs.aws.amazon.com/apigateway/latest/developerguide/limits.html
// Limit is set to 9.9 that also metadata can be transferred in request
const AWS_API_GATEWAY_MAX_PAYLOAD_SIZE_IN_MB = 9.9  

function getByteSizeInMB(str: string): number {
    const blob = new Blob([str]);
    return blob.size / (1024 * 1024);
}

function isVideoTooLargeToBeUploadedThroughAwsApiGateway(video: string): boolean {
   return getByteSizeInMB(video) > AWS_API_GATEWAY_MAX_PAYLOAD_SIZE_IN_MB
}

beforeAll(async () => {
  aui = await UiControlClient.build({
    uiControllerUrl: "http://{{ controller.host }}:{{ controller.port }}",
    inferenceServerUrl: "{{ inference_api_url }}",
    credentials: {
      workspaceId: "{{ credentials.workspace_id }}",
      token: "{{ credentials.access_token }}",
    },
    reporter: new AskUIAllureStepReporter({
      withScreenshots: 'always',
    }),
  });
  await aui.connect();
});

beforeEach(async () => {
  await aui.startVideoRecording();
});

afterEach(async () => {
  await aui.stopVideoRecording();
  const video = await aui.readVideoRecording();
  if (!isVideoTooLargeToBeUploadedThroughAwsApiGateway(video)) {
    AskUIAllureStepReporter.attachVideo(video);
  }
});

afterAll(async () => {
  aui.disconnect();
});

export { aui };
